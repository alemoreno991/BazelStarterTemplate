name: release-please

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write
  pull-requests: write
  issues: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          # this assumes that you have created a personal access token
          # (PAT) and configured it as a GitHub action secret named
          # `MY_RELEASE_PLEASE_TOKEN` (this secret name is not important).
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json

  release-artifacts:
    if: ${{ needs.release-please.outputs.release_created }}
    runs-on: ubuntu-latest
    needs: release-please
    steps:
      - name: Checkout
        # Checkout this repo's code
        uses: actions/checkout@v4

      - name: Install Bazelisk
        # Install bazel
        uses: bazel-contrib/setup-bazel@0.14.0
        with:
          # Avoid downloading Bazel every time.
          bazelisk-cache: true
          # Store build cache per workflow.
          disk-cache: ${{ github.workflow }}
          # Share repository cache between workflows.
          repository-cache: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Authenticate Bazel
        run: |
          # Intall the credential-helper
          CREDENTIAL_HELPER_PATH=$(bazelisk run @tweag-credential-helper//installer)
          # Make the credential-helper executable
          chmod +x "$CREDENTIAL_HELPER_PATH"

      - name: Build & Push OCI Image
        # Build and push OCI image to Image Registry
        id: build-push-oci-image
        run: |
          # Build and push the oci images
          # NOTE: this will generate tarballs as intermediate steps
          SEMANTIC_VERSION="$(jq -r '.["."]' .release-please-manifest.json)"
          bazelisk run standalone:push_image --revision_mode=RELEASE --release_version="${SEMANTIC_VERSION}"
          # Save the image registry url where the oci image is stored
          REGISTRY_URL=$(bazelisk cquery standalone:repositories --revision_mode=RELEASE --release_version="${SEMANTIC_VERSION}" --output files 2>/dev/null)
          # Save the tag of the oci image
          IMAGE_TAG=$(bazelisk cquery standalone:release-tags --revision_mode=RELEASE --release_version="${SEMANTIC_VERSION}" --output files 2>/dev/null)
          # Save the paths where the tarballs are located
          TARBALLS_PATHS=$(bazelisk cquery standalone:tar --revision_mode=RELEASE --release_version="${SEMANTIC_VERSION}" --output files 2>/dev/null)
          {
            # Make the registry_url and the image tag available as an output var
            echo "REGISTRY_URL=${REGISTRY_URL}";
            echo "IMAGE_TAG=${IMAGE_TAG}";
            # Make the tarball path available as an output variable from this step
            echo "TARBALL_AARCH64_PATH=$(${TARBALLS_PATHS} | grep aarch64)";
            echo "TARBALL_X86_64_PATH=$(${TARBALLS_PATHS} | grep x86_64)"
          } >> "GITHUB_OUTPUT"

      - name: Upload tarball x86_64 (binaries) to release
        uses: svenstaro/upload-release-action@v2
        env:
          REGISTRY_URL: ${{ steps.build-push-oci-image.outputs.REGISTRY_URL }}
          IMAGE_TAG: ${{ steps.build-push-oci-image.outputs.IMAGE_TAG }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./{${{ steps.build-push-oci-image.outputs.TARBALL_X86_64_PATH }},${{ steps.build-push-oci-image.outputs.TARBALL_AARCH64_PATH }}}
          tag: ${{ github.ref }}
          body: "Pull the oci image as follows:\n> docker pull ${REGISTRY_URL}/${IMAGE_TAG}"

      - name: Build Documentation
        # Always use bazelisk rather than bazel to
        # guarantee that the correct version of Bazel
        # (sourced from .bazelversion) is used.
        run: bazelisk build //documentation:docs

      - name: Publish Documentation
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: bazel-bin/documentation/html # The folder the action should deploy.
