module(
    name = "cpp-starter-template",
    version = "2.0.12",
)

#------------- Application dependencies -------------
bazel_dep(name = "fmt", version = "10.2.1")

#------------- Testing dependencies -----------------
bazel_dep(name = "googletest", version = "1.15.2")
bazel_dep(name = "doctest", version = "2.4.11")

#------------- Documentation dependencies -----------
# Starlark implementation of Doxygen rules in Bazel to automatically document the codebase
# https://github.com/TendTo/rules_doxygen
bazel_dep(name = "rules_doxygen", version = "2.1.0", dev_dependency = True)

doxygen_extension = use_extension("@rules_doxygen//:extensions.bzl", "doxygen_extension")

# Use the local doxygen installation on x86
doxygen_extension.configuration(
    platform = "linux",
    sha256 = "dcfc9aa4cc05aef1f0407817612ad9e9201d9bf2ce67cecf95a024bba7d39747",
    version = "1.10.0",
)
use_repo(doxygen_extension, "doxygen")

#################################################################################
# Utilities
#################################################################################
# Formatting and Linting
# https://github.com/aspect-build/rules_lint
bazel_dep(name = "aspect_rules_lint", version = "1.2.2")

# Hedron's Compile Commands Extractor for Bazel
# https://github.com/hedronvision/bazel-compile-commands-extractor
bazel_dep(name = "hedron_compile_commands", dev_dependency = True)
git_override(
    module_name = "hedron_compile_commands",
    commit = "6d29d97b4a40143104cce158b0da848db72cb769",
    remote = "https://github.com/hedronvision/bazel-compile-commands-extractor.git",
)

###############################################################################
# Bazel Dependencies # https://registry.bazel.build/
###############################################################################
# https://github.com/bazelbuild/platforms/release
bazel_dep(name = "platforms", version = "0.0.11")

# https://github.com/bazel-contrib/toolchains_llvm
bazel_dep(name = "toolchains_llvm", version = "1.4.0", dev_dependency = True)

# https://github.com/bazelbuild/bazel/blob/master/tools/build_defs/repo/http.bzl
http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

#--------------------- LLVM Toolchain --------------
# https://steven.casagrande.io/posts/2024/sysroot-generation-toolchains-llvm/
# https://github.com/bazelbuild/rules_rust/blob/main/examples/cross_compile/MODULE.bazel

SYSROOT_BUILD_CONTENT = """
filegroup(
    name = "sysroot",
    srcs = glob(["**"]),
    visibility = ["//visibility:public"],
)
"""

# INTEL/AMD64 Sysroot. LastModified: 2024-04-26T19:15
# https://commondatastorage.googleapis.com/chrome-linux-sysroot/
http_archive(
    name = "sysroot_linux_x64",
    build_file_content = SYSROOT_BUILD_CONTENT,
    sha256 = "5df5be9357b425cdd70d92d4697d07e7d55d7a923f037c22dc80a78e85842d2c",
    urls = ["https://commondatastorage.googleapis.com/chrome-linux-sysroot/toolchain/4f611ec025be98214164d4bf9fbe8843f58533f7/debian_bullseye_amd64_sysroot.tar.xz"],
)

# ARM 64 Sysroot. LastModified: 2024-04-26T18:33
# https://commondatastorage.googleapis.com/chrome-linux-sysroot/
http_archive(
    name = "sysroot_linux_aarch64",
    build_file_content = SYSROOT_BUILD_CONTENT,
    sha256 = "d303cf3faf7804c9dd24c9b6b167d0345d41d7fe4bfb7d34add3ab342f6a236c",
    urls = ["https://commondatastorage.googleapis.com/chrome-linux-sysroot/toolchain/906cc7c6bf47d4bd969a3221fc0602c6b3153caa/debian_bullseye_arm64_sysroot.tar.xz"],
)

# Configure and register the toolchain.
llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm", dev_dependency = True)

llvm.toolchain(
    name = "llvm_toolchain",
    llvm_version = "19.1.6",
    sha256 = {
        "linux-x86_64": "d55dcbb309de7ade4e3073ec3ac3fac4d3ff236d54df3c4de04464fe68bec531",
        "linux-aarch64": "d55dcbb309de7ade4e3073ec3ac3fac4d3ff236d54df3c4de04464fe68bec531",
    },
    strip_prefix = {
        "linux-x86_64": "LLVM-19.1.6-Linux-X64",
        "linux-aarch64": "clang+llvm-19.1.6-aarch64-linux-gnu",
    },
    urls = {
        "linux-x86_64": [
            "https://github.com/llvm/llvm-project/releases/download/llvmorg-19.1.6/LLVM-19.1.6-Linux-X64.tar.xz",
        ],
        "linux-aarch64": [
            "https://github.com/llvm/llvm-project/releases/download/llvmorg-19.1.6/clang+llvm-19.1.6-aarch64-linux-gnu.tar.xz",
        ],
    },
    stdlib = {
        "linux-x86_64": "stdc++",
        "linux-aarch64": "stdc++",
    },
    cxx_standard = {
        "19.1.6": "c++23",
    },
)
llvm.sysroot(
    name = "llvm_toolchain",
    label = "@sysroot_linux_x64//:sysroot",
    targets = ["linux-x86_64"],
)
llvm.sysroot(
    name = "llvm_toolchain",
    label = "@sysroot_linux_aarch64//:sysroot",
    targets = ["linux-aarch64"],
)
use_repo(llvm, "llvm_toolchain")

register_toolchains(
    "@llvm_toolchain//:all",
    dev_dependency = True,
)

###############################################################################
# Containarize your application
#
# TIP: For testing, https://registry.bazel.build/modules/container_structure_test
###############################################################################
bazel_dep(name = "rules_oci", version = "2.2.6")
bazel_dep(name = "rules_pkg", version = "1.0.1")
bazel_dep(name = "aspect_bazel_lib", version = "2.15.3")
bazel_dep(name = "tweag-credential-helper", version = "0.0.5")

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")

# Pull needed base image
oci.pull(
    name = "docker_lib_ubuntu",
    image = "ubuntu",
    platforms = [
        "linux/arm64/v8",
        "linux/amd64",
    ],
    digest = "sha256:67211c14fa74f070d27cc59d69a7fa9aeff8e28ea118ef3babc295a0428a6d21",
)

# Expose the base image
use_repo(oci, "docker_lib_ubuntu", "docker_lib_ubuntu_linux_amd64", "docker_lib_ubuntu_linux_arm64_v8")
