load("@rules_oci//oci:defs.bzl", "oci_image", "oci_image_index", "oci_push", "oci_load")
load("@aspect_bazel_lib//lib:expand_template.bzl", "expand_template")
load("@rules_pkg//pkg:tar.bzl", "pkg_tar")
load("//:bzl/naming_convention.bzl", "naming_convention")
load("//:bzl/variables.bzl", "PROJECT_NAME")
load("//:bzl/transition.bzl", "multi_arch")

package(default_visibility = ["//visibility:public"])

# Make the files available to doxygen
filegroup(
    name = "sources",
    srcs = glob([
        "*.h",
        "*.cpp",
    ]),
    visibility = ["//visibility:public"],
)

cc_binary(
    name = "hello-world",
    srcs = ["main.cpp"],
)

# Exposes the value of the project's naming convention and
# some compilation information to the package naming.
naming_convention(
    name = "naming",

    # We make the product name a variable rather than put it in every rule.
    # This technique can be useful if you need to create packages in many
    # different formats but have not decided on the final naming yet. You
    # can use a placeholder and change it on one location.
    product_name = PROJECT_NAME,
)

# Packaging the binary into tar, which is needed by oci_image rule
pkg_tar(
    name = "tar",
    srcs = [":hello-world"],
    package_file_name = select({
        "//:is_release": "{product_name}_{target_gnu_system}_{compilation_mode}__v{version}.tar",
        "//:is_wip": "{product_name}_{target_gnu_system}_{compilation_mode}__sha256-{commit_sha}.tar",
        "//conditions:default": "{product_name}_{target_gnu_system}_{compilation_mode}.tar",
    }),

    package_variables = ":naming",
)

# Making image
# C++ programs usually need some fundamental libraries such as glibc, libstdc++, etc.
# Correspondigly, use language-specific distroless images.
# Here we use docker.io/library/ubuntu image for this C++ program.

# Use the value of --embed_label under --stamp, otherwise use a deterministic constant
# value to ensure cache hits for actions that depend on this.
expand_template(
    name = "image-annotations",
    out = "labels.txt",
    stamp_substitutions = {
        "0.0.0": "{{STABLE_SEMANTIC_VERSION}}",
        "commit-sha256": "{{STABLE_GIT_COMMIT}}",
    },
    template = [
        "org.opencontainers.image.title={}".format(PROJECT_NAME),
        "org.opencontainers.image.version=0.0.0",
        "org.opencontainers.image.revision=commit-sha256",
    ],
)

oci_image(
    name = "image",
    base = "@docker_lib_ubuntu",
    tars = [":tar"],
    labels = ":image-annotations",
    entrypoint = ["/hello-world"],
)

multi_arch(
    name = "images",
    image = ":image",
    platforms = [
        "//bzl/platforms:linux-x86_64",
        "//bzl/platforms:linux-aarch64",
    ],
)

oci_image_index(
    name = "multiarch_image",
    images = [
        ":images"
    ],
)

IMAGE_NAME = "my-multiarch-image"
# NOTE: STABLE_SEMANTIC_VERSION is defined in tools/bazel_stamp_vars.sh
expand_template(
    name = "release-tags",
    out = "release-tags.txt",
    stamp_substitutions = {
        "0.0.0": "{{STABLE_SEMANTIC_VERSION}}",
    },
    template = [
        "v0.0.0",
    ]
)
# NOTE: STABLE_GIT_COMMIT_SHORT is defined in tools/bazel_stamp_vars.sh
expand_template(
    name = "wip-tags",
    out = "wip-tags.txt",
    stamp_substitutions = {
        "sha256": "{{STABLE_GIT_COMMIT_SHORT}}",
    },
    template = [
        "sha256",
    ]
)
# NOTE: STABLE_GIT_COMMIT_SHORT is defined in tools/bazel_stamp_vars.sh
expand_template(
    name = "dirty-tags",
    out = "dirty-tags.txt",
    stamp_substitutions = {
        "sha256": "{{STABLE_GIT_COMMIT_SHORT}}",
    },
    template = [
        "sha256",
        "latest",
    ]
)
# NOTE: STABLE_IMAGE_REGISTRY is defined in tools/bazel_stamp_vars.sh
expand_template(
    name = "repositories",
    out = "repositories.txt",
    stamp_substitutions = {
        "repository-url/user": "{{STABLE_IMAGE_REGISTRY}}",
        "image": IMAGE_NAME,
    },
    template = ["repository-url/user/image"],
)

oci_push(
    name = "push_image",
    image = ":multiarch_image",
    remote_tags = select({
        "//:is_release": ":release-tags",
        "//:is_wip": ":wip-tags",
        "//conditions:default": ":dirty-tags",
    }),
    repository_file = ":repositories",
)

# Use with 'bazel run' to load the oci image into a container runtime.
# The image is designated using `repo_tags` attribute.
oci_load(
    name = "load_image",
    image = ":multiarch_image",
    format = "oci",
    repo_tags = select({
        "//:is_release": ":release-tags",
        "//:is_wip": ":wip-tags",
        "//conditions:default": ":dirty-tags",
    }),
)
