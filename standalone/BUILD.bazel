load("@rules_oci//oci:defs.bzl", "oci_image", "oci_push", "oci_load")
load("@rules_pkg//pkg:tar.bzl", "pkg_tar")

package(default_visibility = ["//visibility:public"])

cc_binary(
    name = "hello-world",
    srcs = ["main.cpp"],
)

# Packaging the binary into tar, which is needed by oci_image rule
pkg_tar(
    name = "tar",
    srcs = [":hello-world"],
)

# Making image
# C++ programs usually need some fundamental libraries such as glibc, libstdc++, etc.
# Correspondigly, use language-specific distroless images.
# Here we use docker.io/library/ubuntu image for this C++ program.
oci_image(
    name = "image_linux_x86_64",
    base = "@docker_lib_ubuntu",
    tars = [":tar"],
    entrypoint = ["/hello-world"],
    target_compatible_with = [
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
)

oci_image(
    name = "image_linux_aarch64",
    base = "@docker_lib_ubuntu",
    tars = [":tar"],
    entrypoint = ["/hello-world"],
    target_compatible_with = [
        "@platforms//cpu:aarch64",
        "@platforms//os:linux",
    ],
)

oci_push(
    name = "push_image_linux_x86_64",
    image = ":image_linux_x86_64",
    remote_tags = ["latest"],
    repository = "ghcr.io/alemoreno991/linux_x86_64/hello-world",
)
oci_push(
    name = "push_image_linux_aarch64",
    image = ":image_linux_aarch64",
    remote_tags = ["latest"],
    repository = "ghcr.io/alemoreno991/linux_aarch64/hello-world",
)

# Use with 'bazel run' to load the oci image into a container runtime.
# The image is designated using `repo_tags` attribute.
oci_load(
    name = "load_image_linux_x86_64",
    image = ":image_linux_x86_64",
    repo_tags = ["hello-world:latest"],
)
oci_load(
    name = "load_image_linux_aarch64",
    image = ":image_linux_aarch64",
    repo_tags = ["hello-world:latest"],
)
