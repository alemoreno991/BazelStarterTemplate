# Configure credential-helper to download a prebuilt binary
common --@tweag-credential-helper//bzl/config:helper_build_mode="auto"

# rules_oci: disable builtin credential handling
common --repo_env=OCI_GET_TOKEN_ALLOW_FAIL=1

# Configure the credential-helper to be used for your domains
# GitHub
common --credential_helper=github.com=%workspace%/tools/credential-helper
common --credential_helper=raw.githubusercontent.com=%workspace%/tools/credential-helper
# Docker
common --credential_helper=index.docker.io=%workspace%/tools/credential-helper

# Build for aarch64 or x86_64
build:aarch64 --platforms=@toolchains_llvm//platforms:linux-aarch64
build:x86_64 --platforms=@toolchains_llvm//platforms:linux-x86_64

# This tells Bazel how to interact with the version control system
build --stamp --workspace_status_command=./tools/bazel_stamp_vars.sh

# Alias for the build setting
build --flag_alias=revision_mode=//:revision_mode
build --flag_alias=release_version=//:release_version
build --flag_alias=commit_sha=//:commit_sha

###############################################################################
# Remote Bazel Execution (buildbuddy)
#
# - With API key (in separate auth file)
# - Cache enabled (full)
# - Remote execution enabled
###############################################################################
# Enable buildbuddy to show results and be the build backend
build --bes_results_url=https://app.buildbuddy.io/invocation/
build --bes_backend=grpcs://remote.buildbuddy.io
# Enable remote execution so actions are performed on the remote systems.
build --remote_executor=grpcs://remote.buildbuddy.io
# Enable remote cache
build --remote_cache=grpcs://remote.buildbuddy.io

# Depending on how many machines are in the remote execution instance, setting
# this higher can make builds faster by allowing more jobs to run in parallel.
# Setting it too high can result in jobs that timeout, however, while waiting
# for a remote machine to execute them.
build --jobs=50

# Set several flags related to specifying the platform, toolchain
# These flags should only be used as is for the rbe-ubuntu16-04 container
# and need to be adapted to work with other toolchain containers.
# build:remote --crosstool_top=@rbe_default//cc:toolchain
build --repo_env=BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1
# Platform flags:
# The toolchain container used for execution is defined in the target indicated
# by "extra_execution_platforms", "host_platform" and "platforms".
# More about platforms: https://docs.bazel.build/versions/master/platforms.html
# build:remote --extra_toolchains=@rbe_default//config:cc-toolchain
# build:remote --extra_execution_platforms=@rbe_default//config:platform
# build:remote --host_platform=@rbe_default//config:platform
build --host_platform=@buildbuddy_toolchain//:platform
# build:remote --platforms=@rbe_default//config:platform

# Starting with Bazel 0.27.0 strategies do not need to be explicitly
# defined. See https://github.com/bazelbuild/bazel/issues/7480
build --define=EXECUTOR=remote

# Enforce stricter environment rules, which eliminates some non-hermetic
# behavior and therefore improves both the remote cache hit rate and the
# correctness and repeatability of the build.
build --incompatible_strict_action_env=true

# Set a higher timeout value, just in case.
build --remote_timeout=10m

## FIXME: fully migrate to bzlmod
common --enable_workspace
